%{
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// workaround for peg/leg/greg's shady parsing of "{}" even in
// character class literals
#define _OBRACK '{'
#define _CBRACK '}'

#ifdef USE_GC

void *GC_malloc(size_t);
void *GC_calloc(size_t, size_t);
void *GC_realloc(void *, size_t);
void GC_free(void *);

#define YY_ALLOC(N, D)      GC_malloc(N)
#define YY_CALLOC(N, S, D)  GC_malloc((N) * (S))
#define YY_REALLOC(B, N, D) GC_realloc(B, N)
#define YY_FREE             GC_free

#else

#define YY_ALLOC(N, D)      malloc(N)
#define YY_CALLOC(N, S, D)  calloc(N, S)
#define YY_REALLOC(B, N, D) realloc(B, N)
#define YY_FREE             free

#endif

#define tokenPos { core->token[0] = thunk->begin + G->offset; core->token[1] = (thunk->end - thunk->begin); }
#define tokenPosPlusOne { core->token[0] = thunk->begin + G->offset + 1; core->token[1] = (thunk->end - thunk->begin); }
#define rewindWhiteSpace { char *c = G->buf + G->pos - 1; while((G->pos > 0) && ((*c) == ' ' || (*c) == '\t' || (*c) == '\n' || (*c) == '\r')) { c--; G->pos--; } }

#define missingOp(c) { \
    rewindWhiteSpace; \
    char message[2048]; \
    snprintf(message, 2048, "Missing right operand for '%s' operator!\n", (c)); \
    error(core->this, MISSING_OPERAND, message, G->pos + G->offset); \
}

#define YYSTYPE void*

// the default is 1024, but it causes buffers to be reallocated 4 or 5
// times during the parsing. This is a better default for us, only a few
// modules need to reallocate with that setting
#define YY_BUFFER_START_SIZE 16384
#define YY_STACK_SIZE YY_BUFFER_START_SIZE

//#define YY_DEBUG

///////////////////// main struct, for the sake of being re-entrant ////////////////////////

struct _Core {
    void *this;
    int yylineno;
    char* path;
    FILE *stream;
    int token[2];
    char typeBuffer[4096];
    int importQuantity;
};

typedef struct _Core Core;

#define YY_XTYPE Core *
#define YY_XVAR core

#define YY_INPUT(buf, result, max_size, core) yyInput(buf, &result, max_size, core)

void yyInput(char *buf, int *result, int max_size, Core *core) {
    (*result) = fread(buf, 1, max_size, core->stream);
    static int doneNewlineHack = 0;
    if((*result) == 0 && doneNewlineHack == 0) {
        doneNewlineHack = 1;
        (*buf) = '\n';
        (*result) = 1;
        return;
    }
    for(int i = 0; i < (*result) - 1; i++) {
        if(buf[i] == '\\') {
            if(buf[i+1] == '\r') {
                buf[i] = ' ';
                buf[i+1] = ' ';
                if(buf[i+2] == '\n') {
                    buf[i+2] == ' ';
                    i += 2; continue;
                }
                i += 1; continue;
            } else if(buf[i+1] == '\n') {
                buf[i] = ' ';
                buf[i+1] = ' ';
                i += 1; continue;
            }
        }
    }
}

///////////////////// callbacks def start, you may want to skip this ////////////////////////

void setTokenPositionPointer(void *this, int *tokenPosPointer);

char *StringClone(char *string);
char *trailingQuest(char *string);
char *trailingBang (char *string);

void onUse(void *this, char *name);
void onImport (void *this, char *path, char *name);

void onStructStart(void *this, char *name);
void onStructExtern(void *this, char *externName);
void onStructEnd(void *this);

void onVarDeclStart(void *this);
void onVarDeclName(void *this, char *name);
void onVarDeclExtern(void *this, char *externName);
void onVarDeclUnmangled(void *this, char *unmangledName);
void onVarDeclExpr(void *this, void *expr);
void onVarDeclType(void *this, void *type);
void *onVarDeclEnd(void *this);

void *onTypeAccess(void *this, void *type);

void *onTypeNew(void *this, char *name);     // $$=onTypeNew(yytext)
void *onTypePointer(void *this, void *type);   // $$=onTypePointer($$)
void *onTypeBrackets(void *this, void *type, void *inner); // $$=onTypeBrackets($$, inner)

void *onFuncTypeNew(void *this);
void onFuncTypeArgument(void *this, void *funcType, void *argType);
void onFuncTypeVarArg(void *this, void *funcType);
void onFuncTypeReturnType(void *this, void *funcType, void *returnType);

void onFunctionStart(void *this, char *name);
void onFunctionExtern(void *this, char *externName);
void onFunctionUnmangled(void *this, char *unmangledName);
void onFunctionArgsStart(void *this);
void onFunctionArgsEnd(void *this);
void onFunctionReturnType(void *this, void *type);
void onFunctionBody(void *this);
void *onFunctionEnd(void *this);

void onTypeArg(void *this, void *type);
void onVarArg(void *this, char *name);

void onFunctionCallStart(void *this, char *yytext);
void onFunctionCallArg(void *this, void *expr);
void *onFunctionCallEnd(void *this);

void *onStringLiteral(void *this, char *text);
void *onCharLiteral(void *this, char *value);

void onStatement(void *this, void *statement);
void *onReturn(void *this, void *expr);

void *onVarAccess(void *this, void *expr, char *name);
void onArrayAccessStart(void *this, void *array);
void *onArrayAccessEnd(void *this);
void *onCast(void *this, void *expr, void *type);

void *onBreak(void *this);
void *onContinue(void *this);

void onBlockStart(void *this);
void *onBlockEnd(void *this);

void onIfStart(void *this, void *condition);
void *onIfEnd(void *this);
void onElseStart(void *this);
void *onElseEnd(void *this);

void onForeachStart(void *this, void *decl, void *collec);
void *onForeachEnd(void *this);

void onWhileStart(void *this, void *condition);
void *onWhileEnd(void *this);

void *onEquals(void *this, void *left, void *right);
void *onNotEquals(void *this, void *left, void *right);
void *onLessThan(void *this, void *left, void *right);
void *onMoreThan(void *this, void *left, void *right);
void *onLessThanOrEqual(void *this, void *left, void *right);
void *onMoreThanOrEqual(void *this, void *left, void *right);

void *onDecLiteral(void *this, char *value);
void *onBinLiteral(void *this, char *value);
void *onOctLiteral(void *this, char *value);
void *onHexLiteral(void *this, char *value);
void *onFloatLiteral(void *this, char *value);
void *onBoolLiteral(void *this, bool value);
void *onNull(void *this);

void *onTernary(void *this, void *condition, void *ifTrue, void *ifFalse);
void *onAssignAnd(void *this, void *left, void *right);
void *onAssignOr(void *this, void *left, void *right);
void *onAssignXor(void *this, void *left, void *right);
void *onAssignRightShift(void *this, void *left, void *right);
void *onAssignLeftShift(void *this, void *left, void *right);
void *onAssignDiv(void *this, void *left, void *right);
void *onAssignMul(void *this, void *left, void *right);
void *onAssignExp(void *this, void *left, void *right);
void *onAssignSub(void *this, void *left, void *right);
void *onAssignAdd(void *this, void *left, void *right);
void *onAssign(void *this, void *left, void *right);

void *onAdd(void *this, void *left, void *right);
void *onSub(void *this, void *left, void *right);
void *onMod(void *this, void *left, void *right);
void *onMul(void *this, void *left, void *right);
void *onExp(void *this, void *left, void *right);
void *onDiv(void *this, void *left, void *right);
void *onRangeLiteral(void *this, void *left, void *right);
void *onBinaryLeftShift(void *this, void *left, void *right);
void *onBinaryRightShift(void *this, void *left, void *right);
void *onLogicalOr(void *this, void *left, void *right);
void *onLogicalAnd(void *this, void *left, void *right);
void *onBinaryOr(void *this, void *left, void *right);
void *onBinaryXor(void *this, void *left, void *right);
void *onBinaryAnd(void *this, void *left, void *right);

void *onLogicalNot(void *this, void *inner);
void *onBinaryNot(void *this, void *inner);
void *onUnaryMinus(void *this, void *inner);

void *onParenthesis(void *this, void *inner);

void *onAddressOf  (void *this, void *inner);
void *onDereference(void *this, void *inner);

void onMatchStart(void *this);
void onMatchExpr(void *this, void *value);
void *onMatchEnd(void *this);
void onCaseStart(void *this);
void onCaseExpr(void *this, void *value);
void onCaseEnd(void *this);

void error(void *this, int errorID, char *defaultMessage, int index);

/////////////////////                callbacks def end               ////////////////////////

/////////////////////                 error IDs start                ////////////////////////

// NQE stands for 'NagaQueen Error"

enum Error {
    EXP_STATEMENT_OR_CLOSING_BRACKET = 1,
    EXP_INC_IMP_STMT_OR_DECL,
    EXP_CASE_IN_MATCH,
    EXP_VAR_OR_FUNC_DECL,
    EXP_RET_TYPE,
    EXP_CLOSING_PAREN,
    EXP_CLOSING_SQUAR,
    EXP_ARG,
    UNCLOSED_COMMENT,
    MISSING_OPERAND,
    MISPLACED_SUFFIX,
    MALFORMED_STRINGLIT,
    MALFORMED_CHARLIT,
    MALFORMED_TERNARY,
};

/////////////////////                  error IDs end                 ////////////////////////

%}

Module  =  ModuleCore
          | WS ( !EOL . )*
          EOL { tokenPos; char *message = "Expected use, import or declaration\n";
            if(G->buf[core->token[0]] == _CBRACK) { message = "Unmatched closing bracket"; }
            error(core->this, EXP_INC_IMP_STMT_OR_DECL, message, core->token[0]);
          }

ModuleCore = 
          ( WS Import WS
          | WS Use WS
          | WS Decl WS
          )

Use = USE_KW [ \t]
      - UseCore
      (
      - ','
      - UseCore
      )*

UseCore = < ([A-Za-z0-9/._] | '-')+ > { tokenPos; onUse(core->this, StringClone(yytext)) }

Import  = IMPORT_KW [ \t]
          - ImportAtom
          (
          ',' WS
          - ImportAtom
          )*

ImportAtom = path:ImportPath
            ((name:ImportName { tokenPosPlusOne; }             { onImport(core->this, (char*) path, (char*) name) }
             ) | (
            '[' { core->importQuantity = 0; }
            (name:ImportName { tokenPosPlusOne; } - ',' WS   { core->importQuantity++; onImport(core->this, (char*) path, (char*) name) })*
            (name:ImportName { tokenPosPlusOne; }              { core->importQuantity++; onImport(core->this, (char*) path, (char*) name) })
            ']'
            ))

ImportPath = < (([A-Za-z_0-9] | "." | "-")+ "/")* > { $$=StringClone(yytext) }
ImportName = < ([A-Za-z_0-9] | "-")+ >                { $$=StringClone(yytext) }


Decl    = ( FunctionDecl
          | StructDecl
          | vd:VariableDecl Terminator+ { onStatement(core->this, vd) }
          )

FunctionDecl =
            FUNC_KW -
            name:IDENT { tokenPos; onFunctionStart(core->this, name) }
            # modifiers
            (-  ( externName:ExternName  { onFunctionExtern(core->this, externName) }
                | unmangledName:UnmangledName { onFunctionUnmangled(core->this, unmangledName) }
                )
            )*
            - FunctionDeclBody

FunctionDeclBody = (
            # arguments are optional
            (
                - '(' { onFunctionArgsStart(core->this) }
                (   WS Argument WS
                    (',' WS Argument WS)*
                )?
                - CLOS_PAREN ~{ error(core->this, EXP_ARG, "Malformed function argument (remember, it's `name: Type` in ooc, not `Type name`)\n", G->pos + G->offset) }
                              { onFunctionArgsEnd(core->this) }
            )?

            # return type is optional
            (
                - ':'
                - t:Type ~{ error(core->this, EXP_RET_TYPE, "Missing return type.\n", G->pos + G->offset) }
                          { onFunctionReturnType(core->this, t) }
            )?
            ( - EOL )?
            # body is optional (for abstract/extern-named functions)
            (
                { onFunctionBody(core->this); }
                (WS
                (s:Stmt  { onStatement(core->this, s) })
                WS)*
            )?
            WS END_KW ~{ rewindWhiteSpace; error(core->this, EXP_STATEMENT_OR_CLOSING_BRACKET, "Malformed statement or end keyword missing\n", G->pos + G->offset) }
            ) { $$=onFunctionEnd(core->this); }

Argument    = ( vd:VariableDecl          { tokenPos; onStatement(core->this, vd) }
              | type:Type                { tokenPos; onTypeArg(core->this, type) }
              | "..."                    { tokenPos; onVarArg(core->this, NULL) } # C varargs
              )

StructDecl = (
            STRUCT_KW -
            structName:IDENT { tokenPos; onStructStart(core->this, structName) }
            # modifiers
            (- ( externName: StructExternName { onStructExtern(core->this, externName) } 
                )
            )*
            - EOL

            (-
                # structdecl contents
                (WS
                    ( vd:VariableDecl { tokenPos; onStatement(core->this, vd); } Terminator+
                    )
                WS)*

                WS
            )
            - END_KW
            ) { onStructEnd(core->this) }

ExternName = EXTERN_KW { $$="" }
              (
              - '('
              - < [A-Za-z_] [A-Za-z0-9_]* > { $$=yytext }
              - ')'
              )?
StructExternName = EXTERN_KW { $$="" }
              (
              - '('
              - < [A-Za-z_]* (-)? [A-Za-z0-9_]* > { $$=yytext }
              - ')'
              )?

UnmangledName = UNMANGLED_KW { $$="" }
             (
             - '('
             - unmangledName:IDENT { $$=unmangledName }
             - ')'
             )?

VariableDecl =
            { onVarDeclStart(core->this); }

            (
            varDeclName:IDENT { tokenPos; onVarDeclName(core->this, varDeclName); }
            (- ASS - Expr { onVarDeclExpr(core->this, $$); })?

            # multi-decls
            (
            - ','
            WS nextDeclName:IDENT { onVarDeclName(core->this, nextDeclName); }
            (- ASS - Expr { onVarDeclExpr(core->this, $$); })?
            -
            )*

            WS COLON WS
            (-
              (
                  externName:ExternName { onVarDeclExtern(core->this, externName); }
                | unmangledName:UnmangledName { onVarDeclUnmangled(core->this, unmangledName); }
              )
            )*
            WS Type { onVarDeclType(core->this, $$); }
            (- ASS - Expr { onVarDeclExpr(core->this, $$); })?
            )  { $$=onVarDeclEnd(core->this); }


TypeBase = FuncType |
          (< { tokenPos; core->typeBuffer[0]='\0'; }
            (
                ( "unsigned"                                  { strcat(core->typeBuffer, "unsigned "); } -
                | "signed"                                    { strcat(core->typeBuffer, "signed "); } -
                | "long" &(- ("long" | "double" | "int"))     { strcat(core->typeBuffer, "long "); } -
                | "struct"			                          { strcat(core->typeBuffer, "struct "); } -
                | "union"			                          { strcat(core->typeBuffer, "union "); } -
                )
            - )*
            rest:IDENT { strcat(core->typeBuffer, rest); }
          > { $$=onTypeNew(core->this, core->typeBuffer); })

Type    = (
          t:TypeBase
          - (STAR { t=$$=onTypePointer  (core->this, t); }
          | "[" WS { inner=NULL; } - inner:Expr? "]" { t=$$=onTypeBrackets(core->this, t, inner); }
          )*
          - { $$=t; })

FuncTypeCore = "Συνάρτηση" &[^A-Za-z0-9_] { tokenPos; $$=onFuncTypeNew(core->this); }

FuncType  = funcType:FuncTypeCore
            (
            - '('
            (    - argType:Type { onFuncTypeArgument(core->this, funcType, argType); }
            (',' - argType:Type { onFuncTypeArgument(core->this, funcType, argType); })*
            )?
            ("..." - { onFuncTypeVarArg(core->this, funcType); })?
            - ')'
            )?
            (- ':'
             - returnType:Type { onFuncTypeReturnType(core->this, funcType, returnType); }
            )?
            { $$=funcType; }

Stmt = (
              # some statements need an EOL after them...
              e:EoledStatement
              (Terminator+ | (WS &')') | (WS &',') | (&CommentLine))
           )
          | # ...but block don't
          ( WS c:Conditional
          | WS b:Block
          | WS f:FlowControl (Terminator*)
          )

EoledStatement =  ( WS Return
                  | WS VariableDecl
                  | WS Expr
                  )

Conditional = (If | Else)

Block   = (
           '{' { tokenPos; onBlockStart(core->this); }
          (WS s:Stmt { tokenPos; onStatement(core->this, s) } WS)*
           WS '}' { $$=onBlockEnd(core->this); }
          )

If      = (
          IF_KW { tokenPos; }
          - e:Expr      { onIfStart(core->this, e); }
          - THEN_KW
          ( - EOL )?
          - Body
          - END_KW
          )              { $$=onIfEnd(core->this); }

Else    = (
          ELSE_KW  { tokenPos; }
                         { onElseStart(core->this); }
          # We add the else-if here, because Else If something then sould not have to have an end statement
          (
          - IF_KW { tokenPos; }
          - e:Expr       { onIfStart(core->this, e); }
          - THEN_KW
          ( - EOL )?
          - Body
                         { $$=onIfEnd(core->this); onStatement(core->this,$$); }
          )?

          ( - EOL )?
          - Body
          )              { $$=onElseEnd(core->this); }

FlowControl = (Foreach | While | Break | Continue)

Break    = BREAK_KW    { tokenPos; $$=onBreak(core->this); }
Continue = CONTINUE_KW { tokenPos; $$=onContinue(core->this); }

ImplicitDecl = (v:VariableDecl { $$=v })
             | (i:IDENT        { $$=onVarAccess(core->this, NULL, i); })

Foreach = FOR_KW { tokenPos; }
          - WS decl:ImplicitDecl WS
          - IN_KW
          - collec:Expr WS { onForeachStart(core->this, decl, collec); }
          - EOL
          - Body
          - END_KW
          -            { $$=onForeachEnd(core->this); }

While = WHILE_KW { tokenPos; }
        - WS condition:Expr WS { onWhileStart(core->this, condition); }
        ( - EOL )?
        - Body
        - END_KW
        -            { $$=onWhileEnd(core->this); }

Body =  (
        (WS s:Stmt { tokenPos; onStatement(core->this, s) } WS)*
        ) | s:Stmt { tokenPos; onStatement(core->this, s) }

Return  = (RETURN_KW &([^A-Za-z_]) { tokenPos; } - e:Expr { $$=onReturn(core->this, e); })
        | (RETURN_KW &([^A-Za-z_]) { tokenPos; } -        { $$=onReturn(core->this, NULL); })


Expr     =   v:VariableDecl -
           | b:BinaryOperation

#operators

BinaryOperation = Assignment

Assignment = l: Ternary
                ( ASS            { tokenPos; }  WS   r: Ternary               { $$=l=onAssign(core->this, l, r); }
                | ASS            { tokenPos; }  WS   r: Ternary ~{  missingOp("<-") }   { $$=l=onAssign(core->this, l, r); }
                )*

Ternary =   cond:LogicalOr
            (
          - QUEST { tokenPos; }
          WS ifTrue:LogicalOr ~{ error(core->this, MALFORMED_TERNARY, "Expected expression between ? and : in ternary expression!\n", G->pos + G->offset) }
          - COLON
          WS ifFalse:LogicalOr
            { $$=onTernary(core->this, cond, ifTrue, ifFalse); }
            )?

LogicalOr = l:LogicalAnd
                ( L_OR        { tokenPos; } WS  r: LogicalAnd         ~{  missingOp("ή") } { $$=l=onLogicalOr(core->this, l, r); }
                )*

LogicalAnd = l:BinaryOr
                ( L_AND       { tokenPos; } WS  r: BinaryOr           ~{  missingOp("και") } { $$=l=onLogicalAnd(core->this, l, r); }
                )*

BinaryOr = l:BinaryXor
                ( B_OR        { tokenPos; } WS  r: BinaryXor           ~{  missingOp("|") } { $$=l=onBinaryOr(core->this, l, r); }
                )*

BinaryXor = l:BinaryAnd
                ( B_XOR       { tokenPos; } WS  r: BinaryAnd           ~{  missingOp("^") } { $$=l=onBinaryXor(core->this, l, r); }
                )*

BinaryAnd = l:Equality
                ( B_AND       { tokenPos; } WS  r: Equality            ~{  missingOp("&") } { $$=l=onBinaryAnd(core->this, l, r); }
                )*

Equality = l:Inequality
                ( EQUALS      { tokenPos; } WS  r:Inequality          ~{  missingOp("=") } { $$=l=onEquals(core->this, l, r); }
                | NOT_EQUALS  { tokenPos; } WS  r:Inequality          ~{  missingOp("<>") } { $$=l=onNotEquals(core->this, l, r); }
                )*

Inequality = l:Range
                ( LESSTHAN    { tokenPos; } WS  r:Range                ~{  missingOp("<") } { $$=l=onLessThan(core->this, l, r); }
                | MORETHAN    { tokenPos; } WS  r:Range                ~{  missingOp(">") } { $$=l=onMoreThan(core->this, l, r); }
                | LESSTHAN_EQ { tokenPos; } WS  r:Range               ~{  missingOp("<=") } { $$=l=onLessThanOrEqual(core->this, l, r); }
                | MORETHAN_EQ { tokenPos; } WS  r:Range               ~{  missingOp(">=") } { $$=l=onMoreThanOrEqual(core->this, l, r); }
                )*

Range   = l:Shift
                ( DOUBLE_DOT  { tokenPos; } WS  r:Shift               ~{  missingOp("..") } { $$=l=onRangeLiteral(core->this, l, r); }
                )*

Shift   = l:Sum
                ( B_LSHIFT    { tokenPos; } WS  r:Sum                 ~{  missingOp("<<") } { $$=l=onBinaryLeftShift(core->this, l, r) }
                | B_RSHIFT    { tokenPos; } WS  r:Sum                 ~{  missingOp(">>") } { $$=l=onBinaryRightShift(core->this, l, r) }
                )*

Sum     = l:Product
                ( PLUS        { tokenPos; } WS  r:Product              ~{  missingOp("+") } { $$=l=onAdd(core->this, l, r); }
                | MINUS       { tokenPos; } WS  r:Product              ~{  missingOp("-") } { $$=l=onSub(core->this, l, r); }
                | PERCENT     { tokenPos; } WS  r:Product              ~{  missingOp("mod") } { $$=l=onMod(core->this, l, r); }
                )*

Product = (ProductLogicalNot | ProductBinaryNot | ProductCore)

ProductLogicalNot = L_NOT { tokenPos; } - (inner:Product) - { $$=inner=onLogicalNot(core->this, inner); }
ProductBinaryNot  = B_NOT { tokenPos; } - (inner:Product) - { $$=inner=onBinaryNot (core->this, inner); }

ProductCore = l:Access
                    ( EXP { tokenPos; } WS r:Product { $$=l=onExp(core->this, l, r); }
                    | STAR { tokenPos; } WS r:Access { $$=l=onMul(core->this, l, r); }
                    | SLASH { tokenPos; } WS r:Access { $$=l=onDiv(core->this, l, r); }
                    )*

Access =  ((ident:IDENT_CORE { tokenPos; } '&' ![&=] - { core->token[1] += 1; $$=l=onAddressOf(core->this, onVarAccess(core->this, NULL, ident)); }) # special case: blah& is always a reference. blah & blih is a binary and.
          | l:Value)
                ((
                    - '[' - { tokenPos; onArrayAccessStart(core->this, l); }
                             index:Expr - { onStatement(core->this, index); }
                   (',' WS index:Expr - { onStatement(core->this, index); })*
                    - ']' - { $$=l=onArrayAccessEnd(core->this); }
                 )
                | '.' r:IDENT_CORE { tokenPos; $$=l=onVarAccess(core->this, l, r); }
                | - AS_KW { tokenPos; } -  r:Type       { $$=l=onCast(core->this, l, r); }
                | '&' ![&=] - &([ \t\r\n;,)}] | ']')    { core->token[1] += 1; $$=l=onAddressOf(core->this, l); }
                | '@'                                    { $$=l=onDereference(core->this, l); }
                )* -

FunctionCall = callName:IDENT { tokenPos; onFunctionCallStart(core->this, callName); }
               FunctionCallCore { $$=onFunctionCallEnd(core->this); }

FunctionCallCore =
           '(' WS
	       (
	            
               e:Expr { tokenPos; onFunctionCallArg(core->this, e); }
               (WS
               ','
               WS
                e:Expr { tokenPos; onFunctionCallArg(core->this, e); }
               )*
           )?
           WS CLOS_PAREN ~{ rewindWhiteSpace; error(core->this, EXP_CLOSING_PAREN, "Expected closing parenthesis to finish the function call!\n", G->pos + G->offset) }


VariableAccess = i:IDENT_CORE

Value   = ('-' - '(' { tokenPos; } WS inner:Expr WS ')' { $$=onUnaryMinus(core->this, onParenthesis(core->this, inner)); } -)
        | ('-' - { tokenPos; } value:ValueCore { $$=onUnaryMinus(core->this, value); })
        | ('(' { tokenPos; } WS inner:Expr WS ')' { $$=onParenthesis(core->this, inner); } ('&' ![&=] { $$=onAddressOf(core->this, $$); })? -)
        | ValueCore

IntLiteral =
        ( o:OCT_LIT -                                      { tokenPos; $$=onOctLiteral(core->this, yytext); }
        | h:HEX_LIT -                                      { tokenPos; $$=onHexLiteral(core->this, yytext); }
        | d:DEC_LIT -                                      { tokenPos; $$=onDecLiteral(core->this, yytext); }
        )

ValueCore =
        ( o:OCT_LIT -                                      { tokenPos; $$=onOctLiteral(core->this, yytext); }
        | h:HEX_LIT -                                      { tokenPos; $$=onHexLiteral(core->this, yytext); }
        | b:BIN_LIT -                                      { tokenPos; $$=onBinLiteral(core->this, yytext); }
        | f:FLOAT_LIT -                                    { tokenPos; $$=onFloatLiteral(core->this, yytext); }
        | d:DEC_LIT -                                      { tokenPos; $$=onDecLiteral(core->this, yytext); }
        | s:STRING_LIT -
        | c:CHAR_LIT -
        | b:BOOL_LIT  -                                    { tokenPos; $$=onBoolLiteral(core->this, $$); }
        | NULL_KW &[^A-Za-z_] -                            { tokenPos; $$=onNull(core->this); }
        | FunctionCall
        | v:VariableAccess                                 { tokenPos; $$=onVarAccess(core->this, NULL, v); }
        )

BREAK_KW     = "σταμάτα"
CONTINUE_KW  = "συνέχισε"
RETURN_KW    = "Γύρνα"
END_KW       = "Τέλος"

FUNC_KW      = "Συνάρτηση"
STRUCT_KW    = "Δομή"
EXTERN_KW    = "εξωτερική"
UNMANGLED_KW = "unmangled"

IMPORT_KW    = "Εισήγαγε"
USE_KW       = "Χρήση"
IF_KW        = "Αν"
THEN_KW      = "τότε"
ELSE_KW      = "Αλλιώς"
FOR_KW       = "Για"
WHILE_KW     = "Οσο"
AS_KW        = "ως"
IN_KW        = "in"

TRUE_KW      = "αληθής"
FALSE_KW     = "ψευδής"

NULL_KW      = "null"

             # a few keywords voluntarily left out
KW           = BREAK_KW | CONTINUE_KW | RETURN_KW | FUNC_KW
             | STRUCT_KW | EXTERN_KW | UNMANGLED_KW | IMPORT_KW
             | IF_KW | ELSE_KW | FOR_KW | WHILE_KW | AS_KW
             | NULL_KW | END_KW | THEN_KW

DOT          = !DOUBLE_DOT '.'
COLON        = ':'

R_ARROW      = '->'

# Operators

ASS          = '<-' -

QUEST        = '?'   -

L_OR         = 'ή'  -

L_AND        = 'και'  -

B_OR         = !L_OR '|' !'='   -

B_XOR        = '^' !'='   -

B_AND        = !L_AND '&' !'='  -

EQUALS       = '='  -
NOT_EQUALS   = '<>'  -

LESSTHAN     = '<'  !'=' -
MORETHAN     = '>'  !'=' -
LESSTHAN_EQ  = '<='  -
MORETHAN_EQ  = '>='  -

B_LSHIFT     = '<<' !'=' -
B_RSHIFT     = '>>' !'=' -

DOUBLE_DOT   = '..'  -

L_NOT        = '!' !'='  -
B_NOT        = '~' !'='  -
PLUS         = '+' !'='   -
MINUS        = '-' !'='  -

PERCENT = 'mod' !'=' -
EXP = '**' ! '=' -
STAR = '*' !'=' -
SLASH = '/' !'=' ![/*] -

CLOS_BRACK    = '}'
CLOS_SQUAR    = ']'
CLOS_PAREN    = ')'
CLOS_COMMENT  = '*/'

-          = ([ \t] | CommentMultiLine)*
EOL        = ('\n' | '\r\n' | '\r')  { core->yylineno++; }
Terminator = (CommentLine
           | CommentMultiLine? (EOL | ';')
             )
WS         = ([ \t] | Comment | EOL)*

Comment = (CommentLine | CommentMultiLine)
CommentLine = "//" !'/' (!EOL .)* EOL
CommentMultiLine =    "/*" !'*' (!"*/" (EOL | .))* CLOS_COMMENT ~{ error(core->this, UNCLOSED_COMMENT, "Unclosed multi-line comment!\n", G->pos + G->offset); }

OCT_LIT      = < "0c" [0-8] [0-8_]* >
BIN_LIT      = < "0b" [01] [01_]* >
HEX_LIT      = < "0x" [0-9a-fA-F] [0-9a-fA-F_]* >
FLOAT_LIT    = < "-"? [0-9_]+ DOT [0-9_]* >        -
DEC_LIT      = < "-"? [0-9] [0-9_]* >                   -

IDENT        = i:IDENT_CORE -
IDENT_CORE   = !(KW ![_A-Za-z0-9])  # a keyword is not an ident
               < [_a-zA-Z][_0-9a-zA-Z]* > { $$=yytext; }
               ( '?' { $$=trailingQuest($$); }
               | '!' { $$=trailingBang($$); })?
               
SINGLE_QUOTE = '\''
DOUBLE_QUOTE = '"'

STRING_LIT   = '"' < (!'"'   ("\\" ('x'[0-9A-Za-z][0-9A-Za-z]([0-9A-Za-z][0-9A-Za-z])? | [0-9][0-9]?[0-9]? | ["'abtnvfr0\\]) | EOL | .))* >
               DOUBLE_QUOTE ~{ error(core->this, MALFORMED_STRINGLIT , "Malformed string literal!\n", G->pos + G->offset); }
               -  { tokenPos; $$=onStringLiteral(core->this, yytext); }
CHAR_LIT     = '\'' < (!'\'' ("\\" ('x'[0-9A-Za-z][0-9A-Za-z]([0-9A-Za-z][0-9A-Za-z])? | [0-9][0-9]?[0-9]? | ["'abtnvfr0\\]) | .)) >
               SINGLE_QUOTE  ~{ error(core->this, MALFORMED_CHARLIT , "Malformed char literal!\n", G->pos + G->offset); }
               -  { tokenPos; $$=onCharLiteral(core->this, yytext); }
BOOL_LIT     = (TRUE_KW &[^A-Za-z_] { $$=(void*) true; } | FALSE_KW &[^A-Za-z_] { $$=(void*) false; }) -

%%

int parse(void *this, char *path) {

    GREG *G = YY_ALLOC(sizeof(GREG), 0);
    G->buflen = 0;

    Core *core = YY_ALLOC(sizeof(Core), 0);
    core->yylineno = 0;
    core->this = this;
    core->path = path;
    core->stream = fopen(path, "r");
    setTokenPositionPointer(this, core->token);
    if(!core->stream) {
        printf("Not found: %s\n", path);
        return -1;
    }

    G->data = core;

    while (yyparse(G)) {}
    fclose(core->stream);

    return 0;

}

